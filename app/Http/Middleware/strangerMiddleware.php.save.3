<?php

namespace App\Http\Middleware;

use Closure;
use App\Stranger;
use Request;

class strangerMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */    
public function handle($request, Closure $next)
    {
        //strangerVisitor::hit();

	function console_log($output, $with_script_tags = true) {
    		$js_code = 'console.log(' . json_encode($output, JSON_HEX_TAG) . ');';
    	if ($with_script_tags) {
        	$js_code = '<script>' . $js_code . '</script>';
    	}
    	echo $js_code;
	}


	$arrContextOptions=array(
    	"ssl"=>array(
	        "verify_peer"=>false,
        	"verify_peer_name"=>false,
    		),
	);

        //$ip = $_SERVER['REMOTE_ADDR'];
        $publicIP = file_get_contents('https://api.ipify.org/?format=json');
	console_log($publicIP);


	// Function to get the real client ip address
	function get_client_ip_server() {
	    $ipaddress = '';
	    if ($_SERVER['HTTP_CLIENT_IP'])
	        $ipaddress = $_SERVER['HTTP_CLIENT_IP'];
		console_log($ipaddress);
	    el if($_SERVER['HTTP_X_FORWARDED_FOR'])
	        $ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];
		console_log($ipaddress);
	    elseif($_SERVER['HTTP_X_FORWARDED'])
	        $ipaddress = $_SERVER['HTTP_X_FORWARDED'];
		console_log($ipaddress);
	    elseif($_SERVER['HTTP_FORWARDED_FOR'])
	        $ipaddress = $_SERVER['HTTP_FORWARDED_FOR'];
		console_log($ipaddress);
	    elseif($_SERVER['HTTP_FORWARDED'])
	        $ipaddress = $_SERVER['HTTP_FORWARDED'];
		console_log($ipaddress);
	    elseif($_SERVER['REMOTE_ADDR'])
	        $ipaddress = $_SERVER['REMOTE_ADDR'];
		console_log($ipaddress);
	    else
	        $ipaddress = 'UNKNOWN';
		console_log($ipaddress);
 
    	return $ipaddress;
	}
	//console_log($ipaddress);

	if (strpos($ipaddress,'192.168') !== false) {
		get_client_ip_server();
	}



/*        if (strpos($ip,'192.168') !== false) {
            $response1 = file_get_contents('http://api.ipstack.com/'.$publicIP.'?access_key=b67005e171d5dea746de04097d400193&format=1', false, stream_context_create($arrContextOptions));
            $response1 = json_decode($response1, true);    
            Stranger::create([
                'ip'   => $publicIP,
                'created_at' => date('Y-m-d'),
                'browser' => $_SERVER['HTTP_USER_AGENT'],
                'http_referer' => Request::server('HTTP_REFERER'),
                'lat' => $response1['latitude'],
                'lng' => $response1['longitude'],
                'city'=> $response1['city'],
                'regionName' => $response1['region_name'],
            ]);
            return $next($request);
        }
        else {
            $response2 = file_get_contents('http://api.ipstack.com/'.$publicIP.'?access_key=b67005e171d5dea746de04097d400193&format=1');
            $response2 = json_decode($response2, true);    
            Stranger::create([
                'ip'   => $_SERVER['REMOTE_ADDR'],
                'created_at' => date('Y-m-d'),
                'browser' => $_SERVER['HTTP_USER_AGENT'],
                'http_referer' => Request::server('HTTP_REFERER'),                    
		        'lat' => $response2['latitude'],
                'lng' => $response2['longitude'],
                'city'=> $response2['city'],
                'regionName' => $response2['region_name'],
                ]);
            return $next($request);
        var_dump($response2);
        var_dump($response1);
        }
*/
    }
}
